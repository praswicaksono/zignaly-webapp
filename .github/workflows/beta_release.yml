name: Beta Release
on:
  push:
    branches:
      - develop
jobs:
  build:
    name: Webapp Beta Release
    runs-on: ubuntu-18.04
    steps:
        -   name: Configure deployment folder
            run: |
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' appspec.yml
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' scripts/configure_app.sh
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' scripts/change_permission.sh
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' scripts/move_symlink.sh
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' scripts/prepare_release.sh
                sed -i -e 's/{directory}/${{ secrets.TEST_RELEASE_DIR }}/g' scripts/delete_old_release.sh
        -   name: Get release SHA
            run: echo ${{ github.sha }} > version.txt

        -   name: AWS CodeDeploy
            uses: sourcetoad/aws-codedeploy-action@v1
            with:
                aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
                aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
                aws_region: ap-northeast-1
                codedeploy_name: zignaly
                codedeploy_group: zignaly-frontend-prod
                codedeploy_register_only: false
                s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
                s3_folder: prod
                max_polling_iterations: 60
      # - name: Checkout
      #   uses: actions/checkout@v1
      # - name: Setup Node.js
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: 12
      # - uses: webfactory/ssh-agent@v0.4.1
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_TV_KEY }}
      # - name: Install submodules
      #   run: git submodule update --init
      # - name: Install Dependencies
      #   run: npm ci
      # - name: Test
      #   env:
      #     GATSBY_API_TEST_USER: ${{ secrets.GATSBY_API_TEST_USER }}
      #     GATSBY_API_TEST_PASS: ${{ secrets.GATSBY_API_TEST_PASS }}
      #   #run: npm test -- "tradeApiClient"
      #   run: echo "skipping tests"
      # - name: Build
      #   run: npm run build:test
      # - name: Integration Tests
      #   # temp until we fix the flake errors
      #   continue-on-error: true
      #   uses: cypress-io/github-action@v2
      #   with:
      #     start: npm run serve
      #     record: true
      #   env:
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #     # pass GitHub token to allow accurately detecting a build vs a re-run build
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CYPRESS_baseUrl: http://localhost:9000/app
      # - name: Package & Release
      #   env:
      #     GITHUB_AUTHOR_NAME: ${{ secrets.GITHUB_AUTHOR_NAME }}
      #     GITHUB_AUTHOR_EMAIL: ${{ secrets.GITHUB_AUTHOR_EMAIL }}
      #     GITHUB_COMMITTER_NAME: ${{ secrets.GITHUB_COMMITTER_NAME }}
      #     GITHUB_COMMITTER_EMAIL: ${{ secrets.GITHUB_COMMITTER_EMAIL }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SEMANTIC_RELEASE_PACKAGE: ${{ secrets.SEMANTIC_RELEASE_PACKAGE }}
      #     JIRA_AUTH: ${{ secrets.JIRA_AUTH }}
      #   run: npx semantic-release
      # - name: Configure SSH
      #   run: |
      #     mkdir -p ~/.ssh/
      #     echo "$SSH_KEY" > ~/.ssh/buildbot.key
      #     chmod 600 ~/.ssh/buildbot.key
      #     cat >>~/.ssh/config <<END
      #     Host webapp
      #       HostName $SSH_HOST
      #       User $SSH_USER
      #       Port $SSH_PORT
      #       IdentityFile ~/.ssh/buildbot.key
      #       StrictHostKeyChecking no
      #     END
      #   env:
      #     SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_USER: ${{ secrets.SSH_WEBAPP_USERNAME }}
      #     SSH_HOST: ${{ secrets.SSH_WEBAPP_HOST }}
      #     SSH_PORT: ${{ secrets.SSH_WEBAPP_PORT }}
      # - name: Prepare Deploy Variables
      #   run: |
      #     echo "WEBAPP_VERSION=$(cat .semvernext)" >> $GITHUB_ENV
      #     echo "WEBAPP_PACKAGE=zignaly-webapp2-$(cat .semvernext).tar.gz" >> $GITHUB_ENV
      #     echo $WEBAPP_PACKAGE
      # - name: Deploy Release
      #   run: scp $WEBAPP_PACKAGE webapp:/zignaly/artifacts
      # - name: Unpack Release
      #   run: |
      #     CMD_PREPARE="sudo mkdir -p $UNPACK_DIRECTORY"
      #     ssh webapp $CMD_PREPARE
      #     CMD_UNPACK="sudo tar -zxvf /zignaly/artifacts/$WEBAPP_PACKAGE -C $UNPACK_DIRECTORY"
      #     ssh webapp $CMD_UNPACK
      #     CMD_LINK="sudo ln -nsf $UNPACK_DIRECTORY $APP_LINK"
      #     ssh webapp $CMD_LINK
      #     CMD_RELOAD="sudo /etc/init.d/nginx reload"
      #     ssh webapp $CMD_RELOAD
      #   env:
      #     UNPACK_DIRECTORY: /zignaly/test.zignaly.com/zignaly-webapp2-${{ env.WEBAPP_VERSION }}
      #     APP_LINK: /zignaly/test.zignaly.com/app
